<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-lazy-init="true">

	<description>Shiro安全配置</description>

	<!-- Define any javax.servlet.Filter beans you want anywhere in this application context. -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
	<!-- to the 'filterChainDefinitions' property. Or you can manually/explicitly add them -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details. -->
	<!-- <bean id="someFilter" class="..." /> -->
	<!-- <bean id="anotherFilter" class="..."> -->
	<!-- </bean> -->

	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="myRealm" class="...">
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
		<property name="realm" ref="myRealm" />
		<!-- By default the servlet container sessions will be used. Uncomment this line to use shiro's native sessions (see the 
			JavaDoc for more): <property name="sessionMode" value="native"/> -->
	</bean>
	
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- override these for application-specific URLs if you like: <property name="loginUrl" value="/login.jsp"/> <property 
			name="successUrl" value="/home.jsp"/> <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean -->
		<!-- defined will be automatically acquired and available via its beanName in chain -->
		<!-- definitions, but you can perform instance overrides or name aliases here if you like: <property name="filters"> <util:map> 
			<entry key="anAlias" value-ref="someFilter"/> </util:map> </property> -->
		<property name="filterChainDefinitions">
			<value>
				# some example chain definitions:
				/admin/** = authc, roles[admin]
				/docs/** = authc, perms[document:read]
				/** = authc
				# more URL-to-FilterChain definitions here
			</value>
		</property>
	</bean>

	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run: -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!-- Shiro's main business-tier object for web-enabled applications -->
	<!-- <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"> -->
	<!-- <property name="realm" ref="shiroDbRealm" /> -->
	<!-- <property name="cacheManager" ref="shiroEhcacheManager" /> -->
	<!-- </bean> -->

	<!-- <bean id="shiroDbRealm" class="cec.jiutian.cfm.service.impl.ShiroDbRealm"> -->
	<!-- <property name="accountService" ref="accountService" /> -->
	<!-- </bean> -->

	<!-- Shiro Filter -->
	<!-- <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"> -->
	<!-- <property name="securityManager" ref="securityManager" /> -->
	<!-- <property name="loginUrl" value="/login" /> -->
	<!-- <property name="successUrl" value="/index" /> -->
	<!-- <property name="filterChainDefinitions"> -->
	<!-- <value> -->
	<!-- /login = authc -->
	<!-- /logout = logout -->
	<!-- /static/** = anon -->
	<!-- /api/** = anon -->
	<!-- /** = user -->
	<!-- </value> -->
	<!-- </property> -->
	<!-- </bean> -->

	<!-- 用户授权信息Cache, 采用EhCache -->
	<!-- <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> -->
	<!-- <property name="cacheManagerConfigFile" value="classpath:ehcache.xml" /> -->
	<!-- </bean> -->

</beans>